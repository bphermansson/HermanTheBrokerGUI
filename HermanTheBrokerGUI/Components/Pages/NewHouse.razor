@page "/newhouse"
@using HermanTheBrokerGUI.Models
@using HermanTheBrokerGUI.Services

<h3>Lägg till hus</h3>
<EditForm Model="Model" OnSubmit="Submit" FormName="newhouse">
    <div class="col-sm-2">
        <label>
            Gata:
            <InputText @bind-Value="Model!.Street" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Stad: 
            <InputText @bind-Value="Model!.City" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Area:
            <InputNumber @bind-Value="Model!.Area" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Byggår:
            <InputNumber @bind-Value="Model!.BuildYear" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Antal våningar:
            <InputNumber @bind-Value="Model!.NoOfFloors" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Antal rum:
            <InputNumber @bind-Value="Model!.NoOfRooms" />
        </label>
    </div>
@*         <label>
            Mäklar id:
            <InputText @bind-Value="Model!.BrokerId" />
        </label> *@
    <div class="col-sm-2">
        <label>
            Mäklare:
            <InputSelect @bind-Value="@selectedString">
                @if(Brokers != null)
                {
                    @foreach (var b in Brokers)
                    {
                        <option value="@b.Email">@b.Email</option>
                    }
                }
            </InputSelect>
        </label>
    </div>
    <div>
        <button type="submit">Lägg till</button>
    </div>
</EditForm>

@if (res && submitted)
{
    <p>Hus tillagt.</p>
}
else if (!res && submitted)
{
    <p>Något gick fel.</p>
}

@code {
    [SupplyParameterFromForm]
    public House? Model { get; set; }
    [SupplyParameterFromForm]
    public string selectedString { get; set; }
    [SupplyParameterFromForm]
    public string selectedBrokerId { get; set; }

    List<Broker> Brokers { get; set; } = new();

    [Inject]
    private ApiService ApiService { get; set; }

    protected override void OnInitialized() => Model ??= new();
    bool res;
    bool submitted = false;

    protected override async Task OnInitializedAsync()
    {
        Brokers = await ApiService.GetAllBrokers();
    }

    private async Task Submit()
    {
        submitted = true;
        Model.Broker = await ApiService.GetBrokerByEmail(selectedString);
        Model.BrokerId = Model.Broker.Id;
        res = await ApiService.Newhouse(Model);
    }
}
