@page "/edithouse/{id}"
@using HermanTheBrokerGUI.Models
@using HermanTheBrokerGUI.Services

<h3>Redigera hus</h3>

<EditForm Model="@FormValues" OnValidSubmit="SubmitEdit" FormName="edithouse">
    <div class="col-sm-2">
        <label>
            Hus Id:
            <InputNumber @bind-Value="FormValues.HouseId" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Kategori:
            <InputSelect @bind-Value="CategoryString">
                <option value="@Category.Bostadsrättslägenhet">@Category.Bostadsrättslägenhet</option>
                <option value="@Category.Bostadsrättsradhus">@Category.Bostadsrättsradhus</option>
                <option value="@Category.Villa">@Category.Villa</option>
                <option value="@Category.Fritidshus">@Category.Fritidshus</option>
            </InputSelect>
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Gatuadress:
            <InputText @bind-Value="FormValues.PostalAddress" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Stad:
            <InputText @bind-Value="FormValues!.City" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Utgångspris:
            <InputNumber @bind-Value="FormValues!.AskingPrice" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Bostadsyta:
            <InputNumber @bind-Value="FormValues!.LivingArea" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Biyta:
            <InputNumber @bind-Value="FormValues!.SecondaryArea" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Tomtyta:
            <InputNumber @bind-Value="FormValues!.GardenArea" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Beskrivning:
            <InputTextArea @bind-Value="FormValues.Description" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Antal rum:
            <InputNumber @bind-Value="FormValues.NoOfRooms" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Månadsavgift:
            <InputNumber @bind-Value="FormValues.MonthlyFee" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Driftskostnad per år:
            <InputNumber @bind-Value="FormValues.YearlyRunningCosts" />
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Mäklare:
            <InputSelect @bind-Value="SelectedString">
                @foreach (var br in Brokers)
                {
                    <option value="@br">@br</option>
                }
            </InputSelect>
        </label>
    </div>
    <div class="col-sm-2">
        <label>
            Byggår:
            <InputNumber @bind-Value="FormValues.BuildYear" />
        </label>
    </div>
        <div class="col-sm-2">
        </div>
    <div class="col-sm-2">
        <button>Spara</button>
    </div>
</EditForm>
<div></div>

@if (submitted)
{
    <p>Ändringar sparade.</p>
}

<PicViewer houseId=@Id></PicViewer>

<PicUpload houseId=@Id></PicUpload>

@code {
    [SupplyParameterFromForm]
    public string SelectedString { get; set; }

    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    House FormValues { get; set; } = new();
    [SupplyParameterFromForm]
    public Category? CategoryString { get; set; }

    [Inject]
    private ApiService ApiService { get; set; }

    bool submitted = false;
    House NewHouseValues { get; set; } = new(); 
    int houseId;
    List<Broker> Brokers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (FormValues.HouseId == 0)
        {
            Brokers = await ApiService.GetAllBrokers();
            NewHouseValues = await ApiService.GetById(Int32.Parse(Id));
            FormValues.HouseId = NewHouseValues.HouseId;
            CategoryString = NewHouseValues.Category;

            FormValues.PostalAddress = NewHouseValues.PostalAddress;
            FormValues.City = NewHouseValues.City;
            FormValues.AskingPrice = NewHouseValues.AskingPrice;
            FormValues.LivingArea = NewHouseValues.LivingArea;
            FormValues.SecondaryArea = NewHouseValues.SecondaryArea;
            FormValues.GardenArea = NewHouseValues.GardenArea;
            FormValues.Description = NewHouseValues.Description;
            FormValues.NoOfRooms = NewHouseValues.NoOfRooms;
            FormValues.MonthlyFee = NewHouseValues.MonthlyFee;
            FormValues.YearlyRunningCosts = NewHouseValues.YearlyRunningCosts;
            FormValues.BuildYear = NewHouseValues.BuildYear;
            FormValues.Error = NewHouseValues.Error;
            FormValues.BrokerId = NewHouseValues.BrokerId;
            FormValues.Broker = NewHouseValues.Broker;
        }
    }

    private async Task SubmitEdit()
    {
        submitted = true;
        // Get values again, otherwise Broker gets lost in space...
        NewHouseValues = await ApiService.GetById(Int32.Parse(Id));
        NewHouseValues.HouseId = FormValues.HouseId;
        NewHouseValues.Category = CategoryString;
        NewHouseValues.PostalAddress = FormValues.PostalAddress;
        NewHouseValues.City = FormValues.City;
        NewHouseValues.AskingPrice = FormValues.AskingPrice;
        NewHouseValues.LivingArea = FormValues.LivingArea;
        NewHouseValues.SecondaryArea = FormValues.SecondaryArea;
        NewHouseValues.GardenArea = FormValues.GardenArea;
        NewHouseValues.Description = FormValues.Description;
        NewHouseValues.NoOfRooms = FormValues.NoOfRooms;
        NewHouseValues.MonthlyFee = FormValues.MonthlyFee;
        NewHouseValues.YearlyRunningCosts = FormValues.YearlyRunningCosts;
        NewHouseValues.BuildYear = FormValues.BuildYear;
        NewHouseValues.Error = FormValues.Error;
        NewHouseValues.Broker = await ApiService.GetBrokerByEmail(SelectedString);
        NewHouseValues.BrokerId = NewHouseValues.Broker.Id;

        var res = await ApiService.Edithouse(NewHouseValues);
    }
}
