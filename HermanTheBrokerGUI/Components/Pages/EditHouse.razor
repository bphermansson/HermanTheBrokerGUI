@page "/edithouse/{id}"
@using HermanTheBrokerAPI.Models
@using HermanTheBrokerGUI.Models
@using HermanTheBrokerGUI.Services
@using HermanTheBrokerAPI.Classes

<h3>Redigera hus</h3>

<EditForm Model="@FormValues" method="post" OnValidSubmit="SubmitEdit" FormName="edithouse">
    <div>
        <label>
            :
            <InputText @bind-Value="FormValues.Id" />
        </label>
        <label>
            :
            <InputNumber @bind-Value="FormValues.HouseId" />
        </label>
        <label>
            Gata:
            <InputText @bind-Value="FormValues.Street" />
        </label>
        <label>
            Stad: 
            <InputText @bind-Value="FormValues!.City" />
        </label>
        <label>
            Area:
            <InputNumber @bind-Value="FormValues!.Area" />
        </label>
        <label>
            Byggår:
            <InputNumber @bind-Value="FormValues!.BuildYear" />
        </label>
        <label>
            Antal våningar:
            <InputNumber @bind-Value="FormValues!.NoOfFloors" />
        </label>
        <label>
            Antal rum:
            <InputNumber @bind-Value="FormValues!.NoOfRooms" />
        </label>
@*         <label>
            :
            <InputNumber @bind-Value="FormValues.Category" />
        </label> *@
        <label>
            :
            <InputSelect @bind-Value="FormValues.Error" />
        </label>
        <label>
            :
            <InputText @bind-Value="FormValues.Status" />
        </label>
        <label>
            :
            <InputText @bind-Value="FormValues.BrokerId" />
        </label>
        <Input @bind="FormValues.Broker">



    </div>
    <div>
        <button>Spara</button>
    </div>
</EditForm>

@if (submitted)
{
    <p>Ändringar sparade.</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    House FormValues { get; set; } = new();

    [Inject]
    private ApiService ApiService { get; set; }

    bool submitted = false;
    House NewHouseValues { get; set; } = new();  //Values from db including concurrency token
                                                 //IEnumerable<House> EditHouseValues = new(); 
    public Broker broker;
    Broker b;

    protected override async Task OnInitializedAsync()
    {
        if (FormValues.Area == 0)
        {
            NewHouseValues = await ApiService.GetById(Int32.Parse(Id));
            FormValues.Id = NewHouseValues.Id;
            FormValues.HouseId = NewHouseValues.HouseId;
            FormValues.Street = NewHouseValues.Street;
            FormValues.City = NewHouseValues.City;
            FormValues.Area = NewHouseValues.Area;
            FormValues.BuildYear = NewHouseValues.BuildYear;
            FormValues.NoOfFloors = NewHouseValues.NoOfFloors;
            FormValues.NoOfRooms = NewHouseValues.NoOfRooms;
            FormValues.Category = NewHouseValues.Category;
            FormValues.Error = NewHouseValues.Error;
            FormValues.Status = NewHouseValues.Status;
            FormValues.BrokerId = NewHouseValues.BrokerId;
            FormValues.Broker = NewHouseValues.Broker;
            b = NewHouseValues.Broker;
            //var c = ApiService.GetBrokerByEmail("c.a.com");
            //broker = c.Result;

        }
    }

    private async Task SubmitEdit()
    {
        submitted = true;
        NewHouseValues = await ApiService.GetById(Int32.Parse(Id));

        NewHouseValues.Id = FormValues.Id;
        NewHouseValues.HouseId = FormValues.HouseId;
        NewHouseValues.Street = FormValues.Street;
        NewHouseValues.City = FormValues.City;
        NewHouseValues.Area = FormValues.Area;
        NewHouseValues.BuildYear = FormValues.BuildYear;
        NewHouseValues.NoOfFloors = FormValues.NoOfFloors;
        NewHouseValues.NoOfRooms = FormValues.NoOfRooms;
        NewHouseValues.Category = FormValues.Category;
        NewHouseValues.Error = FormValues.Error;
        NewHouseValues.Status = FormValues.Status;
        NewHouseValues.BrokerId = FormValues.BrokerId;
        //NewHouseValues.Broker = b;

        var res = await ApiService.Edithouse(NewHouseValues);
    }
}
