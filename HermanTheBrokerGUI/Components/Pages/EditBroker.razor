@rendermode InteractiveServer
@page "/editbroker"
@using HermanTheBrokerAPI.Areas.Identity.Data
@using HermanTheBrokerGUI.Classes
@using HermanTheBrokerGUI.Models
@using HermanTheBrokerGUI.Services
@using Microsoft.AspNetCore.Identity

<h3>Redigera mäklare</h3>

 @if (NewValues.Email != "Error")
 {
    <EditForm Model="@FormValues" OnSubmit="SubmitEdit" FormName="edithouse">
        <div class="col-sm-2">
            <label>
                Id:
                <InputText @bind-Value="FormValues.Id" /> 
            </label>
        </div>
        <div class="col-sm-2">
            <label>
                Epost:
                <InputText @bind-Value="FormValues.Email" />
            </label>
        </div>
        <div class="col-sm-2">
            <label>
                Namn:
                <InputText @bind-Value="FormValues.Name" />
            </label>
        </div>
        <div class="col-sm-3">
            <label>
                Användarnamn:
                <InputText @bind-Value="FormValues.UserName" />
            </label>
        </div>
        <div class="col-sm-3">
            <label>
                Telefonnummer:
                <InputNumber @bind-Value="FormValues.PhoneNumber" />
            </label>
        </div>
        @if(BrokersHouses != null)
        {
            <div class="col-sm-4">
                <label>
                    Mina hus:
                    <ul>
                        @foreach (var v in BrokersHouses)
                        {
                            <li>@v.HouseId, @v.PostalAddress, @v.City</li>
                        }
                    </ul>
                </label>
            </div>
        }

        <div class="col-sm-2">
            <button>Spara</button>
        </div>
    </EditForm>
}
<div></div>
<div class="col-sm-3">
    @if(currentImage != null)
    {
        <p>
            Bild:
            <img src="@currentImage" alt="Mäklarbild" width="200em" />
        </p>
    }
    else
    {
        <p>
            Bild:
            <img src="Pictures/placeholder.png" alt="Mäklarbild" width="200em" />
        </p>
    }
    <p>
        Byt bild:
    </p>
        <InputFile OnChange="LoadFile" />
        @uploadResult
</div>

@if (submitted)
{
    <p>Ändringar sparade.</p>
}
@if (error)
{
    <p>Något gick fel. Är du inloggad?"</p>
}

@code {
    [SupplyParameterFromForm]
    Broker FormValues { get; set; } = new();

    IEnumerable<House> BrokersHouses { get; set; }

    [Inject]
    private ApiService ApiService { get; set; }

    bool submitted = false;
    bool error = false;
    Broker NewValues { get; set; } = new();  
    private string uploadResult;
    private string currentImage;

    protected override async Task OnInitializedAsync()
    {
        if (FormValues.Email == null)
        {
            NewValues = await ApiService.GetBrokerByEmail(Config.CurrentEmail);
            BrokersHouses = await ApiService.GetHousesByBrokerEmail(Config.CurrentEmail);
            if (NewValues.Email != "Error")
            {
                FormValues.Id = NewValues.Id;
                FormValues.Name = NewValues.Name;
                FormValues.PhoneNumber = NewValues.PhoneNumber;
                FormValues.ConcurrencyStamp = NewValues.ConcurrencyStamp;
                FormValues.SecurityStamp = NewValues.SecurityStamp;
                FormValues.UserName = NewValues.UserName;
                FormValues.NormalizedUserName = NewValues.NormalizedUserName;
                FormValues.Email = NewValues.Email;
                FormValues.NormalizedEmail = NewValues.NormalizedEmail;
                FormValues.EmailConfirmed = NewValues.EmailConfirmed;
                FormValues.PasswordHash = NewValues.PasswordHash;
                FormValues.PhoneNumberConfirmed = NewValues.PhoneNumberConfirmed;
                FormValues.TwoFactorEnabled = NewValues.TwoFactorEnabled;
                FormValues.LockoutEnd = NewValues.LockoutEnd;
                FormValues.LockoutEnabled = NewValues.LockoutEnabled;
                FormValues.AccessFailedCount = NewValues.AccessFailedCount;
            }
            else
            {
                error = true;
            }
            var path = Path.Combine("wwwroot\\Pictures", "Uploads");
            try
            {
                DirectoryInfo folder = new DirectoryInfo(path);
                FileInfo[] files = folder.GetFiles(FormValues.Id + ".*");
                currentImage = "Pictures/Uploads/" + files[0].Name.ToString();
            }
            catch (Exception ex)
            {

            }
        }
    }

    private async Task SubmitEdit()
    {
        submitted = true;
        NewValues = await ApiService.GetBrokerByEmail(Config.CurrentEmail);

        NewValues.Id = FormValues.Id;
        NewValues.Name = FormValues.Name;
        NewValues.PhoneNumber = FormValues.PhoneNumber;
        NewValues.UserName = FormValues.UserName;
        NewValues.NormalizedUserName = FormValues.NormalizedUserName;
        NewValues.Email = FormValues.Email;
        NewValues.NormalizedEmail = FormValues.NormalizedEmail;
        NewValues.EmailConfirmed = FormValues.EmailConfirmed;
        NewValues.PasswordHash = FormValues.PasswordHash;
        NewValues.PhoneNumberConfirmed = FormValues.PhoneNumberConfirmed;
        NewValues.TwoFactorEnabled = FormValues.TwoFactorEnabled;
        NewValues.LockoutEnd = FormValues.LockoutEnd;
        NewValues.LockoutEnabled = FormValues.LockoutEnabled;
        var res = await ApiService.Editbroker(NewValues);
    }
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            string[] fileending = e.File.Name.Split('.');
            var wholePath = Path.Combine("wwwroot\\Pictures\\Uploads", FormValues.Id);
            await using FileStream fs = new(wholePath + "." + fileending[1], FileMode.Create);
            await e.File.OpenReadStream(10000000).CopyToAsync(fs);
            uploadResult = $"Fil sparad: {wholePath}";
        }
        catch (Exception ex)
        {
            uploadResult = $"Fil: {e.File.Name} Fel: {ex.Message.ToString()}";
        }
    }
}
