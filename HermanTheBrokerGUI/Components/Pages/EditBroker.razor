@page "/editbroker"
@using HermanTheBrokerAPI.Areas.Identity.Data
@using HermanTheBrokerGUI.Classes
@using HermanTheBrokerGUI.Models
@using HermanTheBrokerGUI.Services
@using Microsoft.AspNetCore.Identity

<h3>Redigera mäklare</h3>

 @if (NewValues.Email != "Error")
 {
    <EditForm Model="@FormValues" OnSubmit="SubmitEdit" FormName="edithouse">
        <div>
            <label>
                Id:
                <InputText @bind-Value="FormValues.Id" /> 
            </label>
            <label>
                Name:
                <InputText @bind-Value="FormValues.Name" />
            </label>
              <label>
                PhoneNumber:
                <InputNumber @bind-Value="FormValues.PhoneNumber" />
            </label> 
            <label>
                Email:
                <InputText @bind-Value="FormValues.Email" />
            </label>
            <label>
                NormalizedUserName:
                <InputText @bind-Value="FormValues.NormalizedUserName" />
            </label>
            <label>
                Houses:
                <InputSelect @bind-Value="FormValues.Houses" />
                    @foreach (var v in hs)
                    {
                        <option value="@v">@v</option>
                    }
            </label>
            <label>
                UserName:
                <InputText @bind-Value="FormValues.UserName" />
            </label> 
            <label>
                LockoutEnd:
                <InputDate @bind-Value="FormValues!.LockoutEnd" />
            </label>
            <label>
                NormalizedEmail:
                <InputText @bind-Value="FormValues!.NormalizedEmail" />
            </label>
            <label>
                NormalizedUserName:
                <InputText @bind-Value="FormValues!.NormalizedUserName" />
            </label>
            <label>
                PasswordHash:
                <InputText @bind-Value="FormValues!.PasswordHash" />
            </label>
        </div>
        <div>
            <button>Spara</button>
        </div>
    </EditForm>
}
@if (submitted)
{
    <p>Ändringar sparade.</p>
}
@if (error)
{
    <p>Något gick fel. Är du inloggad?"</p>
}

@code {
    [SupplyParameterFromForm]
    Broker FormValues { get; set; } = new();
    List<House> hs { get; set; } = new();

    [Inject]
    private ApiService ApiService { get; set; }

    bool submitted = false;
    bool error = false;
    Broker NewValues { get; set; } = new();  //Values from db including concurrency token

    protected override async Task OnInitializedAsync()
    {
        if (FormValues.Email == null)
        {
            NewValues = await ApiService.GetBrokerByEmail(Config.CurrentEmail);
            if (NewValues.Email != "Error")
            {
                FormValues.Id = NewValues.Id;
                FormValues.Name = NewValues.Name;
                FormValues.PhoneNumber = NewValues.PhoneNumber;
                foreach (var v in NewValues.Houses)
                {
                    hs.Add(v);
                }
                FormValues.ConcurrencyStamp = NewValues.ConcurrencyStamp;
                FormValues.SecurityStamp = NewValues.SecurityStamp;
                FormValues.UserName = NewValues.UserName;
                FormValues.NormalizedUserName = NewValues.NormalizedUserName;
                FormValues.Email = NewValues.Email;
                FormValues.NormalizedEmail = NewValues.NormalizedEmail;
                FormValues.EmailConfirmed = NewValues.EmailConfirmed;
                FormValues.PasswordHash = NewValues.PasswordHash;
                FormValues.PhoneNumberConfirmed = NewValues.PhoneNumberConfirmed;
                FormValues.TwoFactorEnabled = NewValues.TwoFactorEnabled;
                FormValues.LockoutEnd = NewValues.LockoutEnd;
                FormValues.LockoutEnabled = NewValues.LockoutEnabled;
                FormValues.AccessFailedCount = NewValues.AccessFailedCount;
            }
            else
            {
                error = true;
            }
        }
    }

    private async Task SubmitEdit()
    {
        submitted = true;
        NewValues = await ApiService.GetBrokerByEmail(Config.CurrentEmail);

        NewValues.Id = FormValues.Id;
        NewValues.Name = FormValues.Name;
        NewValues.PhoneNumber = FormValues.PhoneNumber;
        NewValues.Houses = hs;
        NewValues.UserName = FormValues.UserName;
        NewValues.NormalizedUserName = FormValues.NormalizedUserName;
        NewValues.Email = FormValues.Email;
        NewValues.NormalizedEmail = FormValues.NormalizedEmail;
        NewValues.EmailConfirmed = FormValues.EmailConfirmed;
        NewValues.PasswordHash = FormValues.PasswordHash;
        NewValues.PhoneNumberConfirmed = FormValues.PhoneNumberConfirmed;
        NewValues.TwoFactorEnabled = FormValues.TwoFactorEnabled;
        NewValues.LockoutEnd = FormValues.LockoutEnd;
        NewValues.LockoutEnabled = FormValues.LockoutEnabled;
        var res = await ApiService.Editbroker(NewValues);
    }
}
